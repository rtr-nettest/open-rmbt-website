/*******************************************************************************
 * Copyright 2015 Thomas Schreiber
 * Copyright 2015-2020 Rundfunk und Telekom Regulierungs-GmbH (RTR-GmbH)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

/*
 * Script for loading test results from ONE test (only open-data content)
 * Used only by Opentest.html
 */

var color_for_speed_graph_download = "#3CC828"; //or green: #00CC00
var color_for_speed_graph_upload = "#0080C1"; //or green: #00CC00
var color_for_signal_graph = "#D19010"; //D19010
var color_for_signal_graph_lte_background = "#ffe3ab";
var color_for_signal_graph_download_phase = "#B1E9A9";
var color_for_signal_graph_upload_phase = "#99CCE6";
var color_for_map_movement = "#0080C1";
var min_accuracy_for_showing_map = 2000;


$(document).ready(function() {

    //retrieve url parameter
    //take the test-uuid from the url
    var testID = window.location.href.substr(window.location.href.indexOf('?') + 1);
    if (testID.substr(0, 1) === "O") {
        //it is an open-test-uuid => show the specific test
        loadTestResultsFromOpenTestUUID(testID);
    } else {
        alert("invalid open-test-uuid");
    }
    


});

/**
 * Retrieves the detailed test results from the control server
 * and puts them in the tables declared in Opentest.html
 * @param {String} openTestUUID the open-test-uuid from the test
 * @returns {undefined}
 */
function loadTestResultsFromOpenTestUUID(openTestUUID) {
    //this should take longer => inform the user that the system is working
    $('#spinner').spin('modal');
    
    $.ajax({
        url: statisticProxy + "/" + statisticpath + "/opentests/" + openTestUUID + "?" + getCapabilitiesAsQueryParam(),
        type: 'GET',
        dataType: 'json',
        statusCode: {
            404: function(data) {
                $('#spinner').spin('modal');
                $(".testdata table").hide();
                $("#data-prototype").show();
                $(".testdata h2").html(Lang.getString('invalidUUID'));
            }
        },
        success: function(data) {
            //show the table
            $("#data-prototype").show();
    
            //put results in the table
            printTestData(data, "#data-prototype",false);
            
            
            //insert labels into attributes of table cells for displaying on mobile devices
            $("table.testresult-detail tr").each(function (id, row) {
                var label = $(row).find("td").first().text();
                $(row).find("td").last().attr("data-label", label);
            })
            
            $('#spinner').spin('modal');
        }
    });
    
    $.ajax({
        url: controlProxy + "/" + wspath + "/qos/" + openTestUUID + "/" + selectedLanguage,
        type: 'GET',
        dataType: 'json',
        success: function(data) {
            //put results in the table
            if (data.error.length === 0) {
                printQoSTestData(data, "#data-prototype");
            } else {
                $("#data-prototype .testresult-qos").remove();
            }
        },
        error: function() {
            $("#data-prototype .testresult-qos").remove();
        }
    });
}

/**
 * Prints the given test-data into the target specified by "target"
 * @param {json} testdata json-result representing the test-data from the control server
 * @param {css-selector (string)} target where jquery will find the table
 */
function printTestData(testdata, target) {      
    ODF.targetTable = target + " table.testresult-detail";
    ODF.targetTableSummary = target + " table.testresult-summary";
    ODF.json = testdata;
    
    
    //fill fields in the summary table (3 columns) in this order
    ODF.classificationFormatter((testdata.download_kbit/1000).formatNumber(getSignificantDigits(testdata.download_kbit/1000)), "speed_download", testdata.download_classification, 'Mbps');
    ODF.classificationFormatter((testdata.upload_kbit/1000).formatNumber(getSignificantDigits(testdata.upload_kbit/1000)), "speed_upload", testdata.upload_classification, 'Mbps');
    ODF.classificationFormatter((testdata.ping_ms === null)?null:(testdata.ping_ms).formatNumber(getSignificantDigits(testdata.ping_ms)), "ping_shortest", testdata.ping_classification, 'ms');

    //special case, if both signal_strength and lte_rsrp are set
    if (testdata.signal_strength && testdata.lte_rsrp) {
        ODF.classificationFormatter(testdata.lte_rsrp, "lte_rsrp", testdata.signal_classification, 'dBm');
    }
    else {
        //lte
        ODF.classificationFormatter(testdata.lte_rsrp, "signal_strength", testdata.signal_classification, 'dBm');
    }

    ODF.classificationFormatter(testdata.signal_strength, "signal_strength", testdata.signal_classification, 'dBm');
    
    
    //hint: function will deal with null values, but formatting has to be done beforhand
    //e.g. if (value===null) { return null; } else { return formatter(value); }
    //or short: (value===null)?null:formatter(value);
    
    //also, the function does not deal with units atm, so please add manually (e.g. value + Lang.getString('unit'));
    
    //fill fields in the general table (2 columns) in this order
    $("#h2 .test-time").html(ODF.timeFormatter(testdata.time));
    ODF.normalFormatter(true, testdata.network_type, "network_type", false);
    ODF.normalFormatter(true, testdata.cat_technology, "cat_technology", true);

    ODF.normalFormatter(false, testdata.radio_band,"radio_band", true);
    ODF.normalFormatter(false, testdata.channel_number,"channel_number", false);

    ODF.normalFormatter(true, ODF.geopositionFormatter(testdata.lat, testdata.long, testdata.loc_src, testdata.loc_accuracy), "location", false);
    ODF.normalFormatter(true, (testdata.distance===null)?null:testdata.distance.formatNumber(0) + " " + Lang.getString('meters_abbreviation'), "distance", false);
    ODF.normalFormatter(false, (testdata.dtm_level===null)?null:testdata.dtm_level.formatNumber(0) + " " + Lang.getString('meters_abbreviation'), "dtm_level", false);
    ODF.normalFormatter(true, testdata.gkz, "gkz", false);
    ODF.normalFormatter(true, testdata.locality, "locality", false);
    ODF.normalFormatter(true, testdata.community, "community", false);
    ODF.normalFormatter(true, testdata.district, "district", false);
    ODF.normalFormatter(true, testdata.province, "province", false);
    ODF.normalFormatter(false, testdata.atraster100, "atraster100", false);
    ODF.normalFormatter(false, testdata.atraster250, "atraster250", false);
    if (testdata.land_cover) {
        ODF.normalFormatter(false, (Math.round(testdata.land_cover/100)) + " - " + Lang.getString("corine_" + (testdata.land_cover - testdata.land_cover % 100)), "land_cover_cat1", false);
        ODF.normalFormatter(false, (Math.round(testdata.land_cover/10)) + " - " + Lang.getString("corine_" + (testdata.land_cover - testdata.land_cover % 10)), "land_cover_cat2", false);
        ODF.normalFormatter(false, testdata.land_cover + " - " + Lang.getString("corine_" + testdata.land_cover), "land_cover", true, testdata.land_cover);
    }
    if (testdata.link_id) {
        ODF.normalFormatter(false, testdata.link_id, "link_id", false);
        ODF.normalFormatter(false, testdata.link_name, "link_name", false);
        ODF.normalFormatter(false, testdata.link_distance, "link_distance", false);
        ODF.normalFormatter(false, testdata.edge_id, "edge_id", false);
        ODF.normalFormatter(false, testdata.link_name1, "link_name1", false);
        ODF.normalFormatter(false, testdata.link_name2, "link_name2", false);
        ODF.normalFormatter(false, testdata.link_frc, "link_frc", false);
    }
    if (testdata.settlement_type !== null) {
        ODF.normalFormatter(false, testdata.settlement_type + " - " + Lang.getString("settlement_type_" + testdata.settlement_type), "settlement_type", false);
    }

    // mobile network
    ODF.normalFormatter(true, testdata.network_name, "network_name", true);
    ODF.normalFormatter(true, testdata.provider_name, "provider_name", true);
    ODF.normalFormatter(true, testdata.network_mcc_mnc,"network_mcc_mnc",false);
    ODF.normalFormatter(true, (testdata.network_country === null)?null:Lang.getString("countries")[testdata.network_country.toLowerCase()], "network_country", true, (testdata.network_country !== null)?testdata.network_country.toLowerCase():undefined);
    //sim
    ODF.normalFormatter(true, ODF.roamingFormatter(testdata.roaming_type),"roaming_type",false);
    ODF.normalFormatter(true, testdata.sim_mcc_mnc,"sim_mcc_mnc",false);
    ODF.normalFormatter(true, (testdata.sim_country===null)?null:Lang.getString("countries")[testdata.sim_country], "country_sim", true, testdata.sim_country);
    //wifi
    ODF.normalFormatter(true, (testdata.wifi_link_speed===null)?null:(testdata.wifi_link_speed + " " + Lang.getString("Mbps")),"wifi_link_speed",false);
    //lte signal quality
    ODF.normalFormatter(true, (testdata.lte_rsrq===null)?null:testdata.lte_rsrq + " " + Lang.getString('dB'), "lte_rsrq", false);
    //ip network infos
    if (testdata.ip_anonym !== null) {
        var ip = testdata.ip_anonym;
        //add ".x" to IPv4 addresses
        if (ip.indexOf("x") === -1 && ip.indexOf(".") > 0) {
            ip += ".x";
        }
        ODF.normalFormatter(false, ip, "ip_anonym", false);
    }
    ODF.normalFormatter(true, testdata.connection,"nat_type",false);
    ODF.normalFormatter(true, (testdata.country_geoip === null)?null:Lang.getString("countries")[testdata.country_geoip.toLowerCase()], "country_geoip", true, (testdata.country_geoip !== null)?testdata.country_geoip.toLowerCase():undefined);
    ODF.normalFormatter(false, testdata.asn,"asn",false);
    ODF.normalFormatter(true, testdata.public_ip_as_name, "public_ip_as_name", true);
    ODF.normalFormatter(false, (testdata.country_asn === null)?null:Lang.getString("countries")[testdata.country_asn.toLowerCase()], "country_asn", true, (testdata.country_asn !== null)?testdata.country_asn.toLowerCase():undefined);
    //device infos
    ODF.normalFormatter(true, testdata.platform, "platform", true);
    ODF.normalFormatter(true, testdata.model, "model", true);
    ODF.normalFormatter(false, testdata.model_native,"model_native",false);
    ODF.normalFormatter(false, testdata.temperature ? testdata.temperature + " °C" : null, "temperature", false);
    //download test
    ODF.normalFormatter(false, (testdata.time_dl_ms===null)?null:testdata.time_dl_ms.formatNumber(0) + " " + Lang.getString('ms'),"time_dl_ms",false);
    ODF.normalFormatter(true, (testdata.duration_download_ms===null)?null:testdata.duration_download_ms.formatNumber(0) + " " + Lang.getString('ms'),"duration_download_ms",false);
    ODF.normalFormatter(false, (testdata.download_kbit / 1000.0).formatNumber(3) + " " + Lang.getString("Mbps"), "speed_download", false);
    ODF.normalFormatter(false, ODF.bytesFormatter(testdata.bytes_download),"bytes_download",false);
    ODF.normalFormatter(false, ODF.bytesFormatter((testdata.test_if_bytes_download !== 0) ? testdata.test_if_bytes_download : null), "test_if_bytes_download", false);
    ODF.normalFormatter(false, ODF.bytesFormatter((testdata.testdl_if_bytes_download !== 0) ? testdata.testdl_if_bytes_download : null), "testdl_if_bytes_download", false);
    ODF.normalFormatter(false, ODF.bytesFormatter((testdata.testdl_if_bytes_upload !== 0) ? testdata.testdl_if_bytes_upload : null), "testdl_if_bytes_upload", false);
    ODF.normalFormatter(false, (testdata.ndt_download_kbit===null)?null:(testdata.ndt_download_kbit/1000).formatNumber(getSignificantDigits(testdata.ndt_download_kbit/1000)) + " " + Lang.getString("Mbps"), "ndt_download_kbit",false);
    //upload test
    ODF.normalFormatter(false, (testdata.time_ul_ms===null)?null:testdata.time_ul_ms.formatNumber(0) + " " + Lang.getString('ms'),"time_ul_ms",false);
    ODF.normalFormatter(true, (testdata.duration_upload_ms===null)?null:testdata.duration_upload_ms.formatNumber(0) + " " + Lang.getString('ms'),"duration_upload_ms",false);
    ODF.normalFormatter(false, (testdata.upload_kbit / 1000.0).formatNumber(3) + " " + Lang.getString("Mbps"), "speed_upload", false);
    ODF.normalFormatter(false, ODF.bytesFormatter(testdata.bytes_upload),"bytes_upload",false);
    ODF.normalFormatter(false, ODF.bytesFormatter((testdata.test_if_bytes_upload !== 0) ? testdata.test_if_bytes_upload : null), "test_if_bytes_upload", false);
    ODF.normalFormatter(false, ODF.bytesFormatter((testdata.testul_if_bytes_download !== 0) ? testdata.testul_if_bytes_download : null), "testul_if_bytes_download", false);
    ODF.normalFormatter(false, ODF.bytesFormatter((testdata.testul_if_bytes_upload !== 0) ? testdata.testul_if_bytes_upload : null), "testul_if_bytes_upload", false);
    ODF.normalFormatter(false, (testdata.ndt_upload_kbit===null)?null:(testdata.ndt_upload_kbit/1000).formatNumber(getSignificantDigits(testdata.ndt_upload_kbit/1000)) + " " + Lang.getString("Mbps"), "ndt_upload_kbit",false);
    //test settings
    ODF.normalFormatter(false, ODF.timeFormatter(testdata.time),"time",false);
    ODF.normalFormatter(true, testdata.server_name, "server_name", false);
    ODF.normalFormatter(false, testdata.client_version, "client_version", true);
    ODF.normalFormatter(false, testdata.test_duration + " " + Lang.getString("seconds_abbreviation"), "duration", false);
    ODF.normalFormatter(false, testdata.num_threads_requested,"num_threads_requested",false);
    ODF.normalFormatter(false, testdata.num_threads, "num_threads", false);
    ODF.normalFormatter(false, testdata.num_threads_ul, "num_threads_ul", false);
    ODF.normalFormatter(false, testdata.open_test_uuid,"open_test_uuid",false);
    ODF.normalFormatter(true, testdata.open_uuid,"open_uuid",true);
    
    //insert link for additional information
    ODF.insertAdditionalInformationBreak();
    
    //special functions
    //implausible
    if (testdata.implausible === null || testdata.implausible === false)
        $(target + " .test-implausible").remove();
    else
        $(target + " .test-implausible").text(Lang.getString("implausibleResult"));
    
    //position
    if (testdata.lat === null || testdata.long === null || (testdata.loc_accuracy !== null && testdata.loc_accuracy > min_accuracy_for_showing_map)) {
        $(".test-map").hide();
    }
    else {
        var useBasemapAT = (testdata.country_location !== null && testdata.country_location.toLowerCase() === "at")?true:false;
        setPosition(target,testdata.lat,testdata.long,testdata.loc_accuracy, testdata.speed_curve.location, testdata.distance, useBasemapAT);
        //set caption
        $(".test-map th.test-map-position").append(": " + ODF.geopositionFormatter(testdata.lat, testdata.long, testdata.loc_src, testdata.loc_accuracy));
    }
    
    //ping curve
    if (testdata.speed_curve.ping.length > 0) {
        drawPingCurve(target, testdata.speed_curve.ping);
    }

    //speed curve
    if (testdata.speed_curve.download.length > 0 && testdata.speed_curve.upload.length > 0) {
        try {
            drawSingleSpeedCurve(target, testdata.speed_curve.download, "download");
            drawSingleSpeedCurve(target, testdata.speed_curve.upload, "upload");
        } catch (e) { /* IE without canvas */
        }
    } else {
        //if no speed curve => hide graph
        $(target + " .speed-curve").remove();
    }
    //if at least two entries
    if (testdata.speed_curve.signal.length > 1) {
        try {
            var beginPing = null, durationPing = null;
            if (testdata.speed_curve.ping.length > 0) {
                beginPing = testdata.speed_curve.ping[0].time_elapsed;
                var lastPing = testdata.speed_curve.ping[testdata.speed_curve.ping.length-1];
                durationPing = (lastPing.time_elapsed + lastPing.ping_ms) - beginPing;
            }

            drawSignalCurve(target, testdata.speed_curve, testdata.time_dl_ms, testdata.duration_download_ms, testdata.time_ul_ms, testdata.duration_upload_ms, beginPing, durationPing);
        } catch (e) { /* IE without canvas */
        }
    } else {
        //if no speed curve => hide graph
        $(target + " .signal-curve").remove();
    }
    
    //social sharing
    $(target + " a.shareBanner").click(function() {
        showShareBanner(target, testdata.open_test_uuid);
    });
    var url = "https://" + document.domain + "/de/Opentest?" + testdata.open_test_uuid;
    var buttonsContainer = $(target + ' .social');
    new Shariff(buttonsContainer, {
        orientation: 'horizontal',
        title: Lang.getString('RTR-NetTest'),
        url: url,
        buttonStyle: 'standard',
        lang: selectedLanguage,
        services: ['twitter','facebook','whatsapp','print'],
        theme: 'white'
    });

    $(".pdfButton").click(function(e) {
        triggerPdfDownload(testdata.open_test_uuid, ".pdfButton")
        e.preventDefault();
    })
    
}

